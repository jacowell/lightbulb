- name: ensure required vars are set
  assert:
    that:
      - "{{ name_prefix | default('') | length > 0 }}"
      - "{{ aws_key_name | default('') | length > 0 }}"
      - "{{ users|length }}"

- name: ensure security group
  ec2_group:
    name: insecure_all
    description: all ports open
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: all
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0

- name: setup instances (async)
  ec2:
    assign_public_ip: yes
    image: "{{ instance_types[item.1.type].ami_id }}"
    key_name: "{{ aws_key_name }}"
    region: "{{aws_region}}"
    exact_count: 1
    count_tag:
      Name: "{{ name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    instance_tags:
      Name: "{{ name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    instance_type: "{{ instance_types[item.1.type].size }}"
    user_data: "{{ instance_types[item.1.type].user_data | default(omit) }}"
    group: insecure_all
    wait: no
    vpc_subnet_id: "{{vpc_subnet_id}}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ instance_types[item.1.type].disk_space }}"
        delete_on_termination: true
  with_nested:
    - "{{ users }}"
    - "{{ types }}"
  register: async_instances
  when: async

- name: wait a bit for async-started instances
  pause: seconds=90
  when: async_instances | changed and async

- name: setup instances (wait)
  ec2:
    assign_public_ip: yes
    image: "{{ instance_types[item.1.type].ami_id }}"
    key_name: "{{ aws_key_name }}"
    region: "{{aws_region}}"
    exact_count: 1
    count_tag:
      Name: "{{ name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    instance_tags:
      Name: "{{ name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    instance_type: "{{ instance_types[item.1.type].size }}"
    user_data: "{{ instance_types[item.1.type].user_data | default(omit) }}"
    group: insecure_all
    wait: yes
    vpc_subnet_id: "{{vpc_subnet_id}}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ instance_types[item.1.type].disk_space }}"
        delete_on_termination: true
  with_nested:
    - "{{ users }}"
    - "{{ types }}"
  register: instances
  when: not async

- name: wait for instances to answer on SSH
  wait_for:
    port: 22
    host: "{{ item.tagged_instances[0].public_ip }}"
    search_regex: OpenSSH
    timeout: 500
  with_items: "{{ instances.results }}"


- name: generate student inventories
  template:
    src: instances.txt.j2
    dest: ./{{ item.username }}-instances.txt
  with_items: "{{ users }}"

- name: Set Login Name
  set_fact:
    login: centos
  when: "'centos' in item.type"
  with_items: "{{ types }}"

- name: Set Login Name
  set_fact:
    login: ec2-user
  when: "'rhel' in item.type"
  with_items: "{{ types }}"

- name: Add hosts to managed_hosts group
  add_host:
    name: "{{ item.invocation.module_args.instance_tags.Name }}"
    ansible_host: "{{ item.tagged_instances[0].public_ip }}"
    ansible_user: "{{ login }}"
    groups: managed_hosts
  with_items: "{{ instances.results }}"
  register: add_host_output
  changed_when: no

- name: Set Username
  set_fact:
    username: "{{ item | regex_replace('.*-(\\w*)-\\w*$','\\1') }}"
  with_items: "{{ groups.managed_hosts }}"
  delegate_to: "{{ item }}"
  delegate_facts: yes

- name: generate instructor inventory
  template:
    src: instructor_inventory.j2
    dest: ./instructor_inventory
  run_once: yes
